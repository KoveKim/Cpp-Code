// Khristian Kim, CS 135-1003, Assignment 12
// Read file data, check for palindromes, and process strings to palindromes.

#include <iostream>
#include <fstream>
#include <string>
#include <cctype>

using namespace std;

string process(string);

bool is_palindrome(string);
/*
int palindrome_fix_location(string);

string palindrome_addition(string, int);
*/
int main()
{
	ifstream inFile;
	inFile.open("data");
	string preString;

	while(getline(inFile, preString))
	{
		cout << "Original line: " << preString << endl;
		cout << "Processed line: " << process(preString) << endl;

		if (is_palindrome(preString) == true)
			cout << "Line is palindrome." << endl << endl;
		else
			cout << "Line is NOT a palindrome." << endl << endl;

		// asdf
	}

	inFile.close();

	return 0;
}

// Return a string that is lowercase with no punctuation or spacing.
string process(string preString)
{
	string procString;

	for (size_t i = 0; i < preString.length(); i++)
	{
		if (isalnum(preString[i]))
			procString += tolower(preString[i]);
	}

	return procString;
}

// Uses a recursive method to determine if the processed string is a palindrome.
bool is_palindrome(string preString)
{
	






/*
	string temp = process(preString);
	int i = 0, j = temp.length() - 1;
	while (i < j)
	{
		if (temp[i] != temp[j])
			return false;

		i++;
		j--;
	}

	return true;
*/
}
/*
// Return a location where text can be added to the non-palindrome to make it a palindrome.
int palindrome_fix_location(string &palinPos)
{
	adf

	return 1; // Change this later.
)

string palindrome_addition(string &addText, int &palinPos)
{
	adf

	return addText;
}
*/
